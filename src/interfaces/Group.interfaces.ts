import { z } from "zod"

export const GroupSchema = z
	.object({
		entity: z.number(),
		nom: z.string(),
		name: z.string(),
		globalgroup: z.any(),
		datec: z.number(),
		datem: z.any(),
		members: z.record(
			z.object({
				element: z.string(),
				table_element: z.string(),
				fk_element: z.string(),
				ismultientitymanaged: z.number(),
				picto: z.string(),
				id: z.string(),
				statut: z.string(),
				ldap_sid: z.string(),
				search_sid: z.any(),
				employee: z.string(),
				civility_code: z.string(),
				gender: z.any(),
				birth: z.string(),
				email: z.string(),
				personal_email: z.string(),
				socialnetworks: z.array(z.any()),
				skype: z.any(),
				twitter: z.any(),
				facebook: z.any(),
				linkedin: z.any(),
				job: z.string(),
				signature: z.string(),
				address: z.string(),
				zip: z.string(),
				town: z.string(),
				state_id: z.any(),
				state_code: z.any(),
				state: z.any(),
				office_phone: z.string(),
				office_fax: z.string(),
				user_mobile: z.string(),
				personal_mobile: z.string(),
				admin: z.string(),
				login: z.string(),
				api_key: z.string(),
				entity: z.string(),
				pass: z.any(),
				pass_indatabase: z.any(),
				pass_indatabase_crypted: z.string(),
				pass_temp: z.any(),
				datec: z.number(),
				datem: z.number(),
				socid: z.any(),
				contact_id: z.any(),
				fk_member: z.any(),
				fk_user: z.any(),
				fk_user_expense_validator: z.any(),
				fk_user_holiday_validator: z.any(),
				clicktodial_url: z.any(),
				clicktodial_login: z.any(),
				clicktodial_password: z.any(),
				clicktodial_poste: z.any(),
				datelastlogin: z.string(),
				datepreviouslogin: z.string(),
				iplastlogin: z.any(),
				ippreviouslogin: z.any(),
				datestartvalidity: z.string(),
				dateendvalidity: z.string(),
				photo: z.any(),
				lang: z.any(),
				rights: z.object({
					user: z.object({
						user: z.record(z.any()),
						self: z.record(z.any()),
						user_advance: z.record(z.any()),
						self_advance: z.record(z.any()),
						group_advance: z.record(z.any()),
					}),
				}),
				all_permissions_are_loaded: z.number(),
				nb_rights: z.number(),
				user_group_list: z.any(),
				conf: z.record(z.any()),
				default_values: z.any(),
				lastsearch_values_tmp: z.any(),
				lastsearch_values: z.any(),
				users: z.array(z.any()),
				parentof: z.any(),
				accountancy_code: z.string(),
				thm: z.any(),
				tjm: z.any(),
				salary: z.any(),
				salaryextra: z.any(),
				weeklyhours: z.any(),
				color: z.string(),
				dateemployment: z.string(),
				dateemploymentend: z.string(),
				default_c_exp_tax_cat: z.any(),
				ref_employee: z.string(),
				national_registration_number: z.string(),
				default_range: z.any(),
				fk_warehouse: z.any(),
				fields: z.record(
					z.object({
						type: z.string(),
						label: z.string(),
						enabled: z.number(),
						visible: z.number(),
						notnull: z.number(),
						index: z.number(),
						position: z.number(),
						comment: z.string().optional(),
						showoncombobox: z.number(),
						searchall: z.number(),
					})
				),
				db: z.object({
					db: z.object({
						affected_rows: z.any(),
						client_info: z.any(),
						client_version: z.any(),
						connect_errno: z.any(),
						connect_error: z.any(),
						errno: z.any(),
						error: z.any(),
						error_list: z.any(),
						field_count: z.any(),
						host_info: z.any(),
						info: z.any(),
						insert_id: z.any(),
						server_info: z.any(),
						server_version: z.any(),
						sqlstate: z.any(),
						protocol_version: z.any(),
						thread_id: z.any(),
						warning_count: z.any(),
					}),
					type: z.string(),
					forcecharset: z.string(),
					forcecollate: z.string(),
					connected: z.boolean(),
					database_selected: z.boolean(),
					database_name: z.string(),
					database_user: z.string(),
					database_host: z.string(),
					database_port: z.string(),
					transaction_opened: z.number(),
					lastquery: z.string(),
					lastqueryerror: z.any(),
					lasterror: z.any(),
					lasterrno: z.any(),
					prefix_db: z.any(),
					ok: z.boolean(),
					error: z.any(),
				}),
				error: z.any(),
				errorhidden: z.any(),
				errors: z.array(z.any()),
				element_for_permission: z.any(),
				table_element_line: z.string(),
				import_key: z.any(),
				array_options: z.array(z.any()),
				array_languages: z.any(),
				contacts_ids: z.any(),
				linked_objects: z.any(),
				linkedObjectsIds: z.any(),
				linkedObjects: z.any(),
				oldcopy: z.any(),
				restrictiononfksoc: z.number(),
				context: z.array(z.any()),
				canvas: z.any(),
				project: z.any(),
				fk_project: z.any(),
				projet: z.any(),
				fk_projet: z.any(),
				contact: z.any(),
				thirdparty: z.any(),
				user: z.any(),
				origin: z.any(),
				origin_id: z.any(),
				ref: z.string(),
				ref_ext: z.any(),
				ref_previous: z.any(),
				ref_next: z.any(),
				newref: z.any(),
				status: z.string(),
				country: z.any(),
				country_id: z.any(),
				country_code: z.string(),
				region_id: z.any(),
				region_code: z.any(),
				region: z.any(),
				barcode_type: z.any(),
				barcode_type_code: z.any(),
				barcode_type_label: z.any(),
				barcode_type_coder: z.any(),
				mode_reglement_id: z.any(),
				cond_reglement_id: z.any(),
				demand_reason_id: z.any(),
				transport_mode_id: z.any(),
				cond_reglement: z.any(),
				fk_delivery_address: z.any(),
				shipping_method_id: z.any(),
				model_pdf: z.any(),
				modelpdf: z.any(),
				last_main_doc: z.any(),
				fk_bank: z.any(),
				fk_account: z.any(),
				openid: z.any(),
				note_public: z.string(),
				note_private: z.string(),
				note: z.string(),
				total_ht: z.any(),
				total_tva: z.any(),
				total_localtax1: z.any(),
				total_localtax2: z.any(),
				total_ttc: z.any(),
				lines: z.any(),
				comments: z.array(z.any()),
				name: z.any(),
				lastname: z.string(),
				firstname: z.string(),
				civility_id: z.any(),
				date_creation: z.any(),
				date_validation: z.any(),
				date_modification: z.any(),
				date_cloture: z.any(),
				user_author: z.any(),
				user_creation: z.any(),
				user_creation_id: z.any(),
				user_valid: z.any(),
				user_validation: z.any(),
				user_validation_id: z.any(),
				user_closing_id: z.any(),
				user_modification: z.any(),
				user_modification_id: z.any(),
				next_prev_filter: z.any(),
				specimen: z.number(),
				sendtoid: z.any(),
				alreadypaid: z.any(),
				liste_limit: z.number(),
				clicktodial_loaded: z.number(),
				usergroup_entity: z.array(z.string()),
			})
		),
		id: z.number(),
		import_key: z.any(),
		array_options: z.array(z.any()),
		array_languages: z.any(),
		contacts_ids: z.any(),
		linked_objects: z.any(),
		linkedObjectsIds: z.any(),
		canvas: z.any(),
		fk_project: z.any(),
		contact_id: z.any(),
		user: z.any(),
		origin: z.any(),
		origin_id: z.any(),
		ref: z.number(),
		ref_ext: z.any(),
		statut: z.any(),
		status: z.any(),
		country_id: z.any(),
		country_code: z.any(),
		state_id: z.any(),
		region_id: z.any(),
		barcode_type: z.any(),
		barcode_type_coder: z.any(),
		mode_reglement_id: z.any(),
		cond_reglement_id: z.any(),
		demand_reason_id: z.any(),
		transport_mode_id: z.any(),
		last_main_doc: z.any(),
		fk_bank: z.any(),
		fk_account: z.any(),
		note_public: z.any(),
		note_private: z.any(),
		lastname: z.any(),
		firstname: z.any(),
		civility_id: z.any(),
		date_creation: z.any(),
		date_validation: z.any(),
		date_modification: z.any(),
		date_cloture: z.any(),
		user_author: z.any(),
		user_creation: z.any(),
		user_creation_id: z.any(),
		user_valid: z.any(),
		user_validation: z.any(),
		user_validation_id: z.any(),
		user_closing_id: z.any(),
		user_modification: z.any(),
		user_modification_id: z.any(),
		specimen: z.number(),
		tms: z.number(),
	})
	.partial()
	.catchall(z.any())

export interface Group extends z.infer<typeof GroupSchema> {}
